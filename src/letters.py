import csv
import torch
import numpy as np
from torch.utils.data import Dataset

ABC_SIZE = ord('Z') - ord('A') + 1

upper_case_alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
lower_case_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
# Lower cases that look different than their upper case: a, b, d, e, g, h, i, j, l, n, q, r, t, y

additional_symbols = ['~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '+', '=', '<', '>', '/', '\\',
                      '1', '2', '3', '4', '5', '6', '7', '8', '9']

# leet_speak_alphabet = {
#     'A': ['4', '/\\', '@', '/-\\', '^', '(L', 'Д'],
#     'B': ['I3', '8', '13', '|3', 'ß', '!3', '(3', '/3', ')3', '|-]', 'j3', '6'],
#     'C': ['¢', '{', '<', '(', '©'],
#     'D': [')', '|)', '(|', '[)', 'I>', '|>', '?', 'T)', 'I7', 'cl', '|}', '>', '|]'],
#     'E': ['3', '&', '£', '€', 'ë', '|-', '|=_'],
#     'F': ['|=', 'ƒ', '|#', '/='],
#     'G': ['6', '(_+', '9', '(?,', '<-', '(.'],
#     'H': ['#', '/-/', '[-]', ']-[', ')-(', '(-)', ':-:', '|~|', '|-|', ']~[', '}{', '!-!', '1-1', '\\-/', 'I+I', '/-\\'],
#     'I': ['1', '[]', '|', '!', ']['],
#     'J': [',_|', '_|', '._|', '._]', '_]', ',_]', ']', ';', '1'],
#     'K': ['>|', '|<', '/<', '1<', '|c', '(|', '{|'],
#     'L': ['1', '£', '7', '|_', '|'],
#     'M': ['/V\\', 'JVI', '[V]', '^^', '(v)', '(V)', '|V|', 'nn', 'IVI', '1^1', 'ITI', 'JTI'],
#     'N': ['^/', '|\\|', '/\\/', '[\\]', '<\\>', '{\\}', '|V', '/V', 'И', '^', 'ท'],
#     'O': ['0', 'Q', '()', '[]', '<>', 'Ø'],
#     'P': ['|*', '|o', '|º', '?', '|^', '|>', '|"', '9', '[]D', '|°', '|7'],
#     'Q': ['9', '()_', '0_', '<|', '&'],
#     'R': ['I2', '|`', '|~', '|?', '/2', '|^', 'lz', '|9', '2', '12', '®', '[z', 'Я', '.-', '|2', '|-'],
#     'S': ['5', '$', 'z', '§', '2'],
#     'T': ['7', '+', '-|-', '†', '"|"', '~|~'],
#     'U': ['(_)', '|_|', 'v', 'L|', 'µ', 'บ'],
#     'V': ['\/', '|/', '\|'],
#     'W': ['VV', '\\N', "'//", "\\'", '\\^/', '(n)', '\\V/', '\\X/', '\\|/', 'Ш', 'Щ', 'uu', '2u', 'พ'],
#     'X': ['><', 'Ж', '}{', '×', ')(', ']['],
#     'Y': ['j', '`/', 'Ч', '7', '\\|/', '¥', '\\//'],
#     'Z': ['2', '7_', '-/_', '%', '>_', '~/_', '-\\_', '-|_']
# }

leet_speak_alphabet = {
    'A': ['4', '/\\', 'Д', 'Ā'],
    'B': ['I3', '8', '13', 'ß', '!3'],
    'C': ['¢', '©', 'Ȼ', 'Ĉ'],
    'D': ['|)', '[)', 'I7', 'cl'],
    'E': ['3', '&', '£', '€', 'ë', 'Ǝ'],
    'F': ['|=', 'ƒ', '|#'],
    'G': ['6', '(_+', '9', 'Ġ'],
    'H': ['#', '[-]', ']-[', ')-(', '|-|', ']~[', '}{', '!-!', '1-1'],
    'I': ['1', '[]', '|', '!', '][', 'ï'],
    'J': ['._]', '_]', ',_]'],
    'K': ['|<', '/<', '1<', 'Ḵ'],
    'L': ['1', '|_', '|'],
    'M': ['/V\\', '[V]', '^^', '|V|'],
    'N': ['|\\|', '/\\/', '|V', '/V', 'И'],
    'O': ['0', '()', '[]', 'Ø', 'ö'],
    'P': ['|o', '|º', 'ṗ', 'Ṗ'],
    'Q': ['()_', '0_', 'Ɋ', 'ɋ'],
    'R': ['I2', '12', '®', 'Я', 'Ṛ'],
    'S': ['5', '$', '§', '2', 'Ṩ', 'Ƨ'],
    'T': ['7', '+', '-|-', '†', '"|"', '~|~', 'Ṫ'],
    'U': ['(_)', '|_|', 'L|', 'µ', 'ü'],
    'V': ['\/', '|/', '\|'],
    'W': ["'//", "\\'", '\\^/', '\\V/', '\\X/', '\\|/', 'Ш', 'Щ', 'Ẁ'],
    'X': ['><', 'Ж', '}{', '×'],
    'Y': ['Ч', '¥', 'Ÿ', 'Ŷ'],
    'Z': ['2', '7_', '%', 'ż']
}

class LettersDataset(Dataset):
    def __init__(self, csv_file, device):
        self.data = []
        self.device = device
        with open(csv_file, mode='r') as file:
            reader = csv.DictReader(file)
            for row in reader:
                array = np.array(eval(row['array']), dtype=np.float32)
                label = row['label']
                self.data.append((array, label))
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        array, label = self.data[idx]

        # Add channel dimension and move to device
        array = torch.tensor(array, dtype=torch.float32).unsqueeze(0).to(self.device)

        # Convert label to integer
        if label in upper_case_alphabet:
            label = ord(label) - ord('A')
        else:
            label = len(upper_case_alphabet) + additional_symbols.index(label)
            
        return array, label